# Ruby Asterisk Dial Plan generator
class RADP
  # The current priority
  attr_accessor :p
  alias :priority :p

  # io can be anything that accepts <<
  def initialize(io=$stdout,&block)
    @io = io
    @io << "; Generated by radp (http://hans.fugal.net/src/radp)\n"
    @state = :top
    yield(self) if block_given?
  end

  # Begin a new context
  def context(name)
    raise "Can't have a context here" unless @state == :top
    @state = :context
    @io << "[#{name}]\n"
    yield(self) if block_given?
    @io << "\n"
    @state = :top
  end

  # Begin a new extension
  def ext(name)
    raise "Can't have an extension here" unless @state == :context
    @state = :ext
    @extension = name
    @p = 1
    yield(self) if block_given?
    @state = :context
  end

  # Asterisk +include+ directive
  def includes(name)
    raise "Can't have an includes here" unless @state == :context
    @io << "include => #{name}\n"
  end

  # Asterisk +switch+ directive
  def switch(name)
    raise "Can't have a switch here" unless @state == :context
    @io << "switch => #{name}\n"
  end

  # An Asterisk application (e.g. <tt>Dial('ZAP/1',20)</tt>)
  def app(name,*args)
    raise "Can't have an application here" unless @state == :ext
    p = @p.to_i
    @io << "exten => #{@extension},#{p},#{name}(#{args.join ','})\n"
    @p += 1
    return p
  end

  # For creating applications 
  def method_missing(name,*args,&block)
    if @state == :ext
      app(name,args) 
    else
      super
    end
  end
end
